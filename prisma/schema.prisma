// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Authentication & Accounts
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  role            UserRole  @default(CUSTOMER)
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  orders      Order[]
  cartItems   CartItem[]
  reviews     Review[]
  addresses   Address[]
  wishlist    WishlistItem[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

// Product Management
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  slug        String    @unique
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  sku         String   @unique
  price       Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  costPrice   Decimal? @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  weight      Float?
  dimensions  String?
  tags        String[]
  metaTitle   String?
  metaDescription String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  images      ProductImage[]
  variants    ProductVariant[]
  inventory   ProductInventory?
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  wishlistItems WishlistItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  position  Int      @default(0)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  name      String
  value     String
  price     Decimal? @db.Decimal(10, 2)
  sku       String?  @unique
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductInventory {
  id               String   @id @default(cuid())
  productId        String   @unique
  quantity         Int      @default(0)
  reservedQuantity Int      @default(0)
  lowStockThreshold Int     @default(10)
  trackInventory   Boolean  @default(true)
  allowBackorder   Boolean  @default(false)
  updatedAt        DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_inventory")
}

// Shopping Cart
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

// Wishlist
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Orders & Payments
model Order {
  id             String      @id @default(cuid())
  orderNumber    String      @unique
  userId         String
  status         OrderStatus @default(PENDING)
  paymentStatus  PaymentStatus @default(PENDING)
  shippingStatus ShippingStatus @default(NOT_SHIPPED)
  subtotal       Decimal     @db.Decimal(10, 2)
  shippingCost   Decimal     @db.Decimal(10, 2) @default(0)
  taxAmount      Decimal     @db.Decimal(10, 2) @default(0)
  discountAmount Decimal     @db.Decimal(10, 2) @default(0)
  total          Decimal     @db.Decimal(10, 2)
  currency       String      @default("USD")
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user          User         @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
  payment       Payment?
  shippingAddress Address?  @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  billingAddress  Address?  @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId String?
  discountCode  DiscountCode? @relation(fields: [discountCodeId], references: [id])
  discountCodeId String?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String        @unique
  stripePaymentId String?       @unique
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Shipping & Addresses
model Address {
  id          String  @id @default(cuid())
  userId      String
  type        AddressType
  firstName   String
  lastName    String
  company     String?
  street1     String
  street2     String?
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
  isDefault   Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

// Marketing & Discounts
model DiscountCode {
  id            String         @id @default(cuid())
  code          String         @unique
  description   String?
  type          DiscountType
  value         Decimal        @db.Decimal(10, 2)
  minimumAmount Decimal?       @db.Decimal(10, 2)
  maxUses       Int?
  usedCount     Int            @default(0)
  isActive      Boolean        @default(true)
  startsAt      DateTime?
  expiresAt     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  orders Order[]

  @@map("discount_codes")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

// Reviews & Ratings
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5
  title     String?
  comment   String?
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ShippingStatus {
  NOT_SHIPPED
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
}
